{"version":3,"sources":["opstamp/app.cljs"],"mappings":"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","names":["opstamp.app/counter","id","cljs.core/deref","counter-value","G__30865","re-frame.core/subscribe","G__30866","re-frame.core/dispatch","cljs.core/name","opstamp.app/opinput","p1__30867#","val","G__30868","G__30869","opstamp.app/decoded-op","G__30870","opstamp.app/dated-op","G__30871","opstamp.app/timestamp-date","ts","js/Date","opstamp.app/decode","optime","cljs.core/re-matches","cljs.core/last","cljs.core.take.cljs$core$IFn$_invoke$arity$2","p1__30872#","cljs.core/iterate","js/parseInt","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__30873","vec__30874","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","_","newop","decoded","dated","cljs.core/assoc-in","p__30877","vec__30878","counter-id","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/inc","cljs.core/constantly","G__30881","G__30882","re-frame.core/reg-sub","p__30883","vec__30884","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__30887","G__30888","p__30889","vec__30890","G__30893","G__30894","p__30895","vec__30896","G__30899","G__30900","p__30901","vec__30902","opstamp.app/root-view","opstamp.app/render","reagent.core.render.cljs$core$IFn$_invoke$arity$2","js/document.getElementById","opstamp.app/init","G__30905","re-frame.core/dispatch-sync"],"sourcesContent":["(ns opstamp.app\n  (:require [re-frame.core :as rf]\n            [reagent.core :as reagent]))\n\n\n;; 1. Event Dispatch\n;;    make a view, dispatch an event in a click handler\n\n(defn counter\n  [id]\n  (let [counter-value @(rf/subscribe [::counter id])]\n    [:div {:on-click #(rf/dispatch [:inc-counter id])\n           :style    {:padding    10\n                      :margin     \"10px 0\"\n                      }}\n     (str \"Counter \" (name id) \": \")\n     counter-value]))\n\n\n(defn opinput\n  []\n  (let [val @(rf/subscribe [::input])]\n    [:input {:type     \"text\"\n             :on-change   #(rf/dispatch [:opinput (-> % .-target .-value)])\n             :style    {:padding    20\n                        :margin     \"10px 0\"\n                        :width \"100%\"\n                        :cursor     \"pointer\"}}]))\n\n(defn decoded-op\n  []\n  (let [val @(rf/subscribe [::decoded])]\n    [:div {:style    {:padding    20\n                      :margin     \"10px 0\"\n                      :background \"rgba(0,0,0,0.05)\"\n                      :width \"100%\"\n}}\n     val]))\n\n(defn dated-op\n  []\n  (let [val @(rf/subscribe [::dated])]\n    [:div {:style    {:padding    20\n                      :margin     \"10px 0\"\n                      :background \"rgba(0,0,0,0.05)\"\n                      :width \"100%\"\n                      }}\n     (if val\n       (.toUTCString val))]))\n\n\n;; 2. Event Handling\n;;    register a handler for a given event.\n;;\n;;    - handlers are identified by keyword.\n;;    - simple method:   `reg-event-db` is passed `db` as 1st argument.\n;;      advanced method: `reg-event-fx` is passed 'co-effects' map as 1st argument of which `:db` is one key.\n\n(defn timestamp-date [ts]\n  (if (and (> ts 1000000000)\n           (< ts 2000000000))\n    (js/Date. (* ts 1000))))\n\n(defn decode [optime]\n  (if (re-matches #\"^[0-9]+$\" optime)\n    (last (take 33 (iterate #(/ % 2) (js/parseInt optime))))\n    nil))\n\n(rf/reg-event-db :opinput\n                 (fn [db [_ newop]]\n                   (let [decoded (decode newop)\n                         dated   (timestamp-date decoded)]\n                     (-> db\n                         (assoc-in [::op-input] newop)\n                         (assoc-in [::decoded] decoded)\n                         (assoc-in [::dated] dated)))))\n\n(rf/reg-event-db :inc-counter\n                 (fn [db [_ counter-id]]\n                   (update-in db [::counters counter-id] inc)))\n\n\n(rf/reg-event-db :initialize\n                 ;; we'll call this once, at the beginning, to set up the db.\n                 (constantly {::op-input \"\"\n                              ::counters {\"A\" 0\n                                          \"B\" 0\n                                          \"C\" 0}}))\n\n;; 3. Queries\n;;    make a query for every kind of 'read' into the db.\n;;\n;;    - queries are identified by keyword.\n;;    - queries can (optionally) take parameters.\n;;    - `db` is passed as 1st arg to function.\n;;      vector of [query-id & args] is passed as 2nd arg.\n\n(rf/reg-sub ::counter\n            (fn [db [_ counter-id]]\n              (get-in db [::counters counter-id])))\n\n(rf/reg-sub ::input\n            (fn [db [_ counter-id]]\n              (get-in db [::op-input])))\n\n(rf/reg-sub ::decoded\n            (fn [db [_ counter-id]]\n              (get-in db [::decoded])))\n\n(rf/reg-sub ::dated\n            (fn [db [_ counter-id]]\n              (get-in db [::dated])))\n\n;; 4. Views\n;;    Use reagent to create views.\n;;\n;;    - use `re-frame.core/subscribe` to read queries\n;;    - use `reagent/atom` for local state (not shown here)\n\n(defn root-view\n  \"Render the page\"\n  []\n  [:div\n   {:style {:max-width 300\n            :margin    \"50px auto\"\n            :font-size 16}}\n   [:h3 \"MongoDB oplog timestamp conversion\"]\n   [:h4 \"64 bit timestamp\"]\n   (opinput)\n   [:h4 \"Unix timestamp\"]\n   (decoded-op)\n   [:h4 \"Datestring\"]\n   (dated-op)])\n\n(defn ^:export render []\n  (reagent/render [root-view]\n                  (js/document.getElementById \"root\")))\n\n(defn ^:export init []\n  (rf/dispatch-sync [:initialize])\n\n  (render))\n"]}